<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zyh&#39;s site</title>
  
  <subtitle>这里是Zyh的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sduzhang.cn/"/>
  <updated>2019-11-08T13:58:12.318Z</updated>
  <id>http://sduzhang.cn/</id>
  
  <author>
    <name>Zyh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次C++错误</title>
    <link href="http://sduzhang.cn/2019/11/08/%E8%AE%B0%E4%B8%80%E6%AC%A1C-%E9%94%99%E8%AF%AF/"/>
    <id>http://sduzhang.cn/2019/11/08/记一次C-错误/</id>
    <published>2019-11-08T13:36:40.000Z</published>
    <updated>2019-11-08T13:58:12.318Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新了，啥也没写的几个月主要在忙学院足球队的事，发生了很多事情，我自己也受伤了。不过我最近还是很快乐——因为我发现写编译原理实验很有意思。有一说一，编译原理真的很有意思，建议所有计软方向的同学都来学习（滑稽）。快到编译原理实验截止日期了，于是最近这两天在写实验，实验的内容是写一个PL(0)文法的编译器，好像扯远了…</p><p>这次的主题是记录我在编写c++程序时一个致命错误，首先上省略后的伪代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">production *p[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">queue</span>.in(p[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">queue</span>.empty()) &#123;</span><br><span class="line">    production *p1 = <span class="built_in">queue</span>.out();</span><br><span class="line">    change(p1);</span><br><span class="line">    <span class="keyword">if</span>(p1 in p) <span class="built_in">queue</span>.in(p1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmm这么省略后再看觉得自己能犯这样的错误简直太傻了。由于我以为修改了p1，实际上p1和p中某一个元素指向的是同一个对象，所以总有p1 in p，循环是个死循环。所以说当使用指针的时候一定要注意，如果你的语义需要修改指针指向的对象，一定要搞清楚指针和哪些标识符指向同一个对象，保险起见在修改时应该创建一个新的对象（除非就是要修改这个对象），使用指针的时候一定要注意！！！</p><p>否则下一次就是你要面对着几百行代码和有限的输出内容debug了（笑）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没更新了，啥也没写的几个月主要在忙学院足球队的事，发生了很多事情，我自己也受伤了。不过我最近还是很快乐——因为我发现写编译原理实验很有意思。有一说一，编译原理真的很有意思，建议所有计软方向的同学都来学习（滑稽）。快到编译原理实验截止日期了，于是最近这两天在写实验，实验的
      
    
    </summary>
    
      <category term="工具和技术" scheme="http://sduzhang.cn/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>常用网站</title>
    <link href="http://sduzhang.cn/2019/09/04/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://sduzhang.cn/2019/09/04/常用网站/</id>
    <published>2019-09-04T14:41:10.000Z</published>
    <updated>2019-09-18T12:25:06.218Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome主题网站：<a href="https://www.themebeta.com/" target="_blank" rel="noopener">ThemeBeta</a></p><p>语言练手刷题网站：<a href="https://leetcode.com/problemset/all/" target="_blank" rel="noopener">LeetCode</a></p><p><a href="https://scholar.google.com/" target="_blank" rel="noopener">谷歌学术</a></p><p><a href="https://www.wps.cn/product/wpslinux#" target="_blank" rel="noopener">WPS Office 2019 For Linux</a></p><p>会议期刊查询网站： <a href="http://www.myhuiban.com/?lang=zh_cn" target="_blank" rel="noopener">会伴</a></p><p><a href="http://www.holehouse.org/mlclass/index.html" target="_blank" rel="noopener">机器学习入门笔记</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Chrome主题网站：&lt;a href=&quot;https://www.themebeta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThemeBeta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;语言练手刷题网站：&lt;a href=&quot;https://leetcode.co
      
    
    </summary>
    
      <category term="工具和技术" scheme="http://sduzhang.cn/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>一种对GPU上AES加密的时序攻击</title>
    <link href="http://sduzhang.cn/2019/08/05/cachelinecnt-timing-attack/"/>
    <id>http://sduzhang.cn/2019/08/05/cachelinecnt-timing-attack/</id>
    <published>2019-08-05T10:57:47.000Z</published>
    <updated>2019-08-06T07:03:08.767Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天读了论文  A Complete Key Recovery Timing Attack on a GPU(2016 HPCA)，然后打算和学长一起复现一下这篇论文提出的攻击方法。</p><p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7446081" target="_blank" rel="noopener">论文源地址</a></p><p>论文针对GPU上的AES实现，提出了一种攻击方式。</p><p>首先，他们的motivation是下图中加密时间和程序Cache Line请求数之间对应的线性关系。</p><img src="/images/cachelinecnt_motivation.png" width="350px" height="350px"><h4 id="攻击过程如下："><a href="#攻击过程如下：" class="headerlink" title="攻击过程如下："></a>攻击过程如下：</h4><p>（1）获得设备加密的大量的AES密文和对应加密的时间。</p><p>（2）逐字节对密钥进行猜测，通过密文计算所猜密钥得到理论上最后一轮加密访问的cache_line数，即下图算法三。</p><img src="/images/cachelinecnt.png" width="400px" height="300px"><p>（3）将得到的cachelinecnt数与对应的加密时间作为两个变量，计算皮尔逊相关系数，相关性最高的猜测字节即为原始密钥的对应字节。下图为论文中所得到的结果，横坐标为猜测的密钥，纵坐标为对应皮尔逊系数，图中的尖峰即为攻击结果，k0-k15为密钥对应字节的编号。</p><img src="/images/cachelinecnt_ans.png" width="350px" height="350px"><h4 id="复现代码："><a href="#复现代码：" class="headerlink" title="复现代码："></a>复现代码：</h4><p>首先是将文件中的密文读入，并处理成二维数组，方便后续处理。</p><p>由于密文数据是将一个字节拆成两个十六进制的数字，并且转成按照对应值的字符而不是对应二进制分别存入两个字节（如密文0x4c，拆成4、c并转换成字符<code>&#39;4&#39;</code>和<code>&#39;c&#39;</code>分别存储），所以这一步略显麻烦。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init the matrix cipher[][]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preCipher</span><span class="params">(<span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(path, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">49</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blockNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, line);</span><br><span class="line">            <span class="keyword">uint8_t</span> a,b;</span><br><span class="line">            <span class="keyword">if</span> (line[<span class="number">0</span>] &gt;= <span class="string">'a'</span> &amp;&amp; line[<span class="number">0</span>] &lt;= <span class="string">'f'</span>) a = line[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">else</span> a = line[<span class="number">0</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (line[<span class="number">1</span>] &gt;= <span class="string">'a'</span> &amp;&amp; line[<span class="number">1</span>] &lt;= <span class="string">'f'</span>) b = line[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">else</span> b = line[<span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">            a &amp;= <span class="number">0b00001111</span>;</span><br><span class="line">            b &amp;= <span class="number">0b00001111</span>;</span><br><span class="line">            a = a &lt;&lt; <span class="number">4</span>;</span><br><span class="line">            cipher[i][j] = a ^ b;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是最核心的cache_line_cnt的计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculate the cache_line_cnt</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_cnt</span><span class="params">(<span class="keyword">uint8_t</span> kj, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cache_line_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) holder[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blockNum; i++) &#123;</span><br><span class="line">            <span class="keyword">uint8_t</span> index = (Td4[cipher[i][j] ^ kj] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0b00001111</span>;</span><br><span class="line">           ++holder[index];</span><br><span class="line">            <span class="comment">// printf("%u %u %u\n", b, a,cipher[i][j]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(holder[i]) </span><br><span class="line">            ++cache_line_cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache_line_cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Td4就是AES加密中的T4表。关于T4表，这篇<a href="https://zhuanlan.zhihu.com/p/42264499" target="_blank" rel="noopener">知乎文章</a>写的很清楚，这里不再多解释了。</p><p>在外层用多重循环去调用就能得到所需要的值。</p><p>然后再与对应时间做皮尔逊系数的计算就能得到所猜字节与对应密钥字节的相关性，这里我们使用的是python对应的库传入参数进行计算。</p><p>原论文中的攻击使用100万个样本（时间+密文），论文给出的样本数量与成功率的关系如下图。</p><img src="/images/cachelinecnt_rate.png" width="350px" height="350px"><p>我们首先指定样本数量为10,000，但是效果并不好，所以把样本数量改为500,000，写好脚本后等待步骤（1）中样本的生成…</p><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近几天读了论文  A Complete Key Recovery Timing Attack on a GPU(2016 HPCA)，然后打算和学长一起复现一下这篇论文提出的攻击方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ieeexplore.ieee.org
      
    
    </summary>
    
      <category term="论文学习" scheme="http://sduzhang.cn/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Error: Permission denied (publickey)</title>
    <link href="http://sduzhang.cn/2019/07/27/Error-Permission-denied-publickey/"/>
    <id>http://sduzhang.cn/2019/07/27/Error-Permission-denied-publickey/</id>
    <published>2019-07-27T03:08:21.000Z</published>
    <updated>2019-09-18T12:24:48.774Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题是ssh密钥没有配置好，客户端的私钥和服务器上的公钥不对应。</p><p>在使用<code>hexo d</code>命令时，命令行报错<code>Error: Permission denied (publickey)</code>，我很确定公钥已经正确放在<code>github</code>上，纠结了好久不知道是哪里出了问题。</p><p>今天我在<code>github help</code>上找到了<a href="https://help.github.com/en/articles/error-permission-denied-publickey" target="_blank" rel="noopener">这个问题的解释</a>，官方文档上提示，如果没有使用 <code>sudo</code> 命令生成密钥，然后尝试<code>sudo git push</code>，此时使用的秘钥不是你想要使用的密钥，而应该是你用<code>sudo</code>命令生成的密钥。</p><p>我突然发现自己经常习惯使用<code>sudo</code>命令对文件进行各种操作，权限不够时直接将文件修改为777，导致很多文件的权限是混乱的。对于权限这方面的理解一塌糊涂，自己还是对Linux一无所知啊…</p><p>今天又花了一上午的时间将项目重新移植，幸好项目文件不大，要不然真的要吐血了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题是ssh密钥没有配置好，客户端的私钥和服务器上的公钥不对应。&lt;/p&gt;
&lt;p&gt;在使用&lt;code&gt;hexo d&lt;/code&gt;命令时，命令行报错&lt;code&gt;Error: Permission denied (publickey)&lt;/code&gt;，我很确定公钥已经正确放在&lt;c
      
    
    </summary>
    
      <category term="工具和技术" scheme="http://sduzhang.cn/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>对抗环境下深度学习的局限性</title>
    <link href="http://sduzhang.cn/2019/07/16/AttackOnDL/"/>
    <id>http://sduzhang.cn/2019/07/16/AttackOnDL/</id>
    <published>2019-07-16T03:21:09.000Z</published>
    <updated>2019-08-06T07:45:44.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="论文-The-Limitations-of-Deep-Learning-in-Adversarial-Settings"><a href="#论文-The-Limitations-of-Deep-Learning-in-Adversarial-Settings" class="headerlink" title="论文 The Limitations of Deep Learning in Adversarial Settings"></a>论文 The Limitations of Deep Learning in Adversarial Settings</h3><p><a href="https://arxiv.org/pdf/1511.07528.pdf" target="_blank" rel="noopener">论文源地址</a></p><hr><p>这是一篇16年发表在S&amp;P上的论文，引用数很多，研究者通过引入很小的扰动，使前馈神经网络对图片误分类。</p><p>论文的前提为知道神经网络的结构和权重</p><ul><li>从第一层隐藏层开始，一层一层计算训练的函数得到整个网络的前向导数</li><li>生成对抗显著图，得到图像中点对不同分类预测的影响</li><li>使用启发式算法，选取影响最大的点进行更新</li><li>不断重复这个过程，直到成功误分类或者达到能够忍受的最大失真率。</li></ul><p>针对MNIST这个问题，研究者每次对一对点进行更新，因为这样的点能够互相弥补不足（单个点在增加想要得到的类的概率时，也可能增加其他类的概率），并且一对点要比单个点更容易满足条件（对单个点太严格）。但是这样做复杂度提升了（要遍历所有组合而不只是点）。</p><p>对于实验的结果，研究者统计了不同类数字之间的转化率，以及不同书记之间成功样本的平均失真率，统计出了失败样例和高比例失真样例的分布，进一步追踪高比例失真样例的变化过程，发现样例离开源类别需要的失真率很高，而到达新类需要的失真率类似，所以总失真率要高（两个过程都高）。原因为DNN对一些类的识别更自信。</p><p>更进一步，研究者定义了Hardness measure来度量从原类别到目标类的难易程度，Adversarial distance来定义样本X到目标类的对抗距离，同时用大量样本对抗距离的最小值（作者指出最小值也可以用其他操作，例如统计期望来代替）来衡量一个网络的鲁棒性，并且都给出了计算的数学公式。</p><p>另外，作者在亚马逊众包网站做了统计，发现生成的对抗样本被识别的概率与原样本集相差不大，也就是说人基本上可以正确识别对抗样本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;论文-The-Limitations-of-Deep-Learning-in-Adversarial-Settings&quot;&gt;&lt;a href=&quot;#论文-The-Limitations-of-Deep-Learning-in-Adversarial-Settings&quot; 
      
    
    </summary>
    
      <category term="论文学习" scheme="http://sduzhang.cn/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>对基于HPC数据进行分析的HMD的攻击</title>
    <link href="http://sduzhang.cn/2019/07/11/a164-Dinakarrao/"/>
    <id>http://sduzhang.cn/2019/07/11/a164-Dinakarrao/</id>
    <published>2019-07-11T10:55:27.000Z</published>
    <updated>2019-08-07T01:44:55.345Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>由于需要确定研究的课题，我从DAC19的论文中按照关键词索引找到了这篇论文，并开始了对这篇论文的学习。</p><p>在学习过程中，学长觉得我做的事太庞大了，他觉得翻译全文是一件不必要的事情，同时我也意识到了这件事相当费时间，于是我决定暂停这项工作。两次翻译结果都是半途而废，但是翻译的过程却让我的思路得到了开拓，获得了知识也有了继续下去的热情和动力。</p><p>我认为在学习过程中学习方法是件很重要的事，及时吸取经验教训是一件很重要的事，接下来我会学习对论文进行重点的摘要，重点关注它的研究对象、过程、成果以及思考是否能以此为一个切入点确定题目。</p><hr><p>读完了论文回来对论文的内容做一下总结，填一下坑。</p><p>时间： 2019-07-13</p><h4 id="论文摘要：对（基于HPC捕获的数据进行分析的HMD）的攻击"><a href="#论文摘要：对（基于HPC捕获的数据进行分析的HMD）的攻击" class="headerlink" title="论文摘要：对（基于HPC捕获的数据进行分析的HMD）的攻击"></a>论文摘要：对（基于HPC捕获的数据进行分析的HMD）的攻击</h4><ul><li><p>首先对要攻击的HMD逆向，模仿得到一个白盒的HMD（文中使用ML分类器进行模仿）。</p></li><li><p>然后使用敌对样本预测器来生成所需的（能使应用被误分类的HPC数据）。</p></li><li><p>最后用敌对样本生成器作为应用的一个独立线程产生HPC数据，从HPC来看该数据也是应用的数据，总的数据会误导HMD使其将应用误分类。</p><p>（实验中，HPC所捕获的总的数据与第二步预测的数据之间的误差 &lt; 3%）</p></li></ul><h4 id="该论文中的逆向模仿的是基于ML分类器的HMD，同时论文用实验的方式验证对基于LR（Logistic-Regression）的HMD也同样有效，进一步提出只要能够逆向HMD，论文提出的方法都有效。"><a href="#该论文中的逆向模仿的是基于ML分类器的HMD，同时论文用实验的方式验证对基于LR（Logistic-Regression）的HMD也同样有效，进一步提出只要能够逆向HMD，论文提出的方法都有效。" class="headerlink" title="该论文中的逆向模仿的是基于ML分类器的HMD，同时论文用实验的方式验证对基于LR（Logistic Regression）的HMD也同样有效，进一步提出只要能够逆向HMD，论文提出的方法都有效。"></a>该论文中的逆向模仿的是基于ML分类器的HMD，同时论文用实验的方式验证对基于LR（Logistic Regression）的HMD也同样有效，进一步提出只要能够逆向HMD，论文提出的方法都有效。</h4><hr><p>下面是论文的摘要 。</p><h3 id="Adversarial-Attack-on-Microarchitectural-Events-based-Malware-Detectors"><a href="#Adversarial-Attack-on-Microarchitectural-Events-based-Malware-Detectors" class="headerlink" title="Adversarial Attack on Microarchitectural Events based Malware Detectors"></a>Adversarial Attack on Microarchitectural Events based Malware Detectors</h3><h5 id="（对基于恶意软件检测器的微结构事件的对抗性攻击）"><a href="#（对基于恶意软件检测器的微结构事件的对抗性攻击）" class="headerlink" title="（对基于恶意软件检测器的微结构事件的对抗性攻击）"></a>（对基于恶意软件检测器的微结构事件的对抗性攻击）</h5><h5 id="论文来源：DAC-19"><a href="#论文来源：DAC-19" class="headerlink" title="论文来源：DAC 19"></a>论文来源：DAC 19</h5><h5 id="论文地址"><a href="#论文地址" class="headerlink" title="论文地址"></a><a href="http://delivery.acm.org/10.1145/3320000/3317762/a164-Dinakarrao.pdf?ip=211.87.235.254&id=3317762&acc=ACTIVE%20SERVICE&key=BF85BBA5741FDC6E%2EBA9BBD89F2E1EC6A%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&__acm__=1562750269_2154adae8e8bfb8801bea4a809915fb6" target="_blank" rel="noopener">论文地址</a></h5><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>为了克服传统的基于软件的恶意软件检测技术导致的性能开销，使用机器学习分类器的硬件辅助恶意软件检测（Hardware-assisted Malware Detection，HMD）已经作为一种灵丹妙药出现来检测恶意应用、保护系统。HMD主要依靠通过硬件性能计数器（Hardware Performance Counters，HPCs）捕获生成的底层微结构事件，来区分良性软件和恶意软件。这个工作创建了一个对HMD系统的对抗性攻击，通过一个对抗性样例生成器应用在HPC跟踪（trace）中引入这种微扰来干预（tamper）系统的安全性。为了精巧地制作攻击，我们首先部署了一个对抗性样本预测器，预测对于给定应用程序在HMD被部署的机器学习（ML）分类器错误分类时的敌对HPC模式。进一步，由于攻击者没有直接访问在运行时生成的HPC的权限，因此我们基于对抗样本检测器的输出设计了一种包装在正常应用周围的对抗性样本生成器，用它来生成类似对抗检测器跟踪（trace）的HPC模式。由于对抗性样本生成器应用没有任何的恶意操作，它在传统的基于签名的恶意软件检测措施中无法被检测。用这种攻击方式，恶意软件检测率从82.76%降低到了18.04%。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;由于需要确定研究的课题，我从DAC19的论文中按照关键词索引找到了这篇论文，并开始了对这篇论文的学习。&lt;/p&gt;
&lt;p&gt;在学习
      
    
    </summary>
    
      <category term="论文学习" scheme="http://sduzhang.cn/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>MalGAN</title>
    <link href="http://sduzhang.cn/2019/07/10/MalGAN/"/>
    <id>http://sduzhang.cn/2019/07/10/MalGAN/</id>
    <published>2019-07-10T02:48:33.000Z</published>
    <updated>2019-08-06T07:51:45.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天开始进行人工智能安全方面的学习，首先是找了白皮书来看，在白皮书里提到了这篇论文，于是在这里对这篇论文进行翻译，通过这种方式对论文进行阅读和理解。</p><p>由于要开始找题做项目，所以这篇的翻译就到此为止，这篇半成品也算是给自己留作纪念，虽然翻译的过程费了时间，不过也不是没有收获，尽管翻得不好，但是在这个过程中对一些知识有了最基本的认识，借机看了GAN，感觉还是对自己比较满意的。</p><p>尽管我没翻完，但是我找到了<a href="https://www.zybuluo.com/wuxin1994/note/881171" target="_blank" rel="noopener">别人对这篇论文的心得</a></p><p>看着别人的心得，觉得自己还有很长的路要走啊。</p><p>以下是原文的摘要。</p><hr><h3 id="论文名称：Generating-Adversarial-Malware-Examples-for-Black-Box-Attacks-Based-on-GAN"><a href="#论文名称：Generating-Adversarial-Malware-Examples-for-Black-Box-Attacks-Based-on-GAN" class="headerlink" title="论文名称：Generating Adversarial Malware Examples for Black-Box Attacks Based on GAN"></a>论文名称：Generating Adversarial Malware Examples for Black-Box Attacks Based on GAN</h3><h5 id="（基于GAN的黑盒测试敌对恶意软件样本生成）"><a href="#（基于GAN的黑盒测试敌对恶意软件样本生成）" class="headerlink" title="（基于GAN的黑盒测试敌对恶意软件样本生成）"></a>（基于GAN的黑盒测试敌对恶意软件样本生成）</h5><p><a href="https://arxiv.org/pdf/1702.05983.pdf" target="_blank" rel="noopener">论文源地址</a></p><h3 id="Abstact"><a href="#Abstact" class="headerlink" title="Abstact"></a>Abstact</h3><p>最近几年，机器学习已经被用作检测新型的恶意代码（malware），而恶意代码的作者有着强烈的积极性去攻击这些算法。恶意代码的作者通常没有机会了解恶意代码检测系统中使用的机器学习模型的详细结构和参数，因此他们只能进行黑盒攻击。这篇论文提出了一个生成对抗网络（Generative Adversarial Network），这个网络基于MalGAN算法生成的、可能会绕过黑盒恶意代码检测系统的恶意对抗代码样例。MalGAN使用一个替代检测器（substitute detector）去匹配（fit）黑盒恶意代码检测系统。一个生成网络被训练成最小化替代检测器预测的生成对抗样本的恶意率。MalGAN相对传统基于对抗样本生成算法的有事是MalGAN能使预测率降低到几乎为零，并且能使基于再训练的对抗样本的防御方法难以工作。</p><hr><p>剩下内容简单概述可以看<a href="https://www.zybuluo.com/wuxin1994/note/881171" target="_blank" rel="noopener">这个博客</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;今天开始进行人工智能安全方面的学习，首先是找了白皮书来看，在白皮书里提到了这篇论文，于是在这里对这篇论文进行翻译，通过这种方
      
    
    </summary>
    
      <category term="论文学习" scheme="http://sduzhang.cn/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>
